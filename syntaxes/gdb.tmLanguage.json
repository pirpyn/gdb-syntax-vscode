{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "gdb syntax",
	"patterns": [ { "include": "#expression" } ],
	"repository": {
		"expression": {
			"patterns": [
				{ "include": "#command" },
				{ "include": "#block" },
				{ "include": "#convenience" },
				{ "include": "#comment" },
				{ "include": "#strings" },
				{ "include": "#char" },
				{ "include": "#numeric" },
				{ "inlcude": "#on_off_unlimited" }
			]
		},
		"command": {
			"patterns": [
				{
					"name": "meta.command.skip.gdb",
					"begin": "^[ \t]*(sk(?:i(?:p)?)?)\\b[ \t]*",
					"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
					"patterns": [
						{
							"match": "(-rfu(?:nction)?)\\b[ \t]+([^[ \t]]+)",
							"captures": {
								"1": { "name": "support.function.option.gdb" },
								"2": { "name": "string.regexp.gdb" }
							}
						},
						{
							"match": "(-fu(?:nction)?)\\b[ \t]+([^[ \t]]+)",
							"captures": {
								"1": { "name": "support.function.option.gdb" },
								"2": { "name": "markup.underline.link.location.gdb" }
							}
						},
						{
							"match": "(-fi(?:le)?)\\b[ \t]+([^[ \t]]+)",
							"captures": {
								"1": { "name": "support.function.option.gdb" },
								"2": { "name": "markup.underline.link.filename.gdb" }
							}
						},
						{
							"match": "(-gf(?:ile)?)\\b[ \t]+([^[ \t]]+)",
							"captures": {
								"1": { "name": "support.function.option.gdb" },
								"2": { "name": "string.regexp.gdb" }
							}
						},
						{
							"match": "(fu(?:n(?:c(?:t(?:i(?:o(?:n)?)?)?)?)?)?)\\b(?:[ \t]+([^[ \t]]+))?",
							"captures": {
								"1": { "name": "keyword.control.command.gdb" },
								"2": { "name": "markup.underline.link.location.gdb" }
							}
						},
						{
							"match": "(fi(?:l(?:e)?)?)\\b(?:[ \t]+([^[ \t]]+))?",
							"captures": {
								"1": { "name": "keyword.control.command.gdb" },
								"2": { "name": "markup.underline.link.filename.gdb" }
							}
						},
						{
							"match": "(de(?:l(?:e(?:t(?:e)?)?)?)?)\\b[ \t]+(\\d+)[ \t]*",
							"captures": {
								"1": { "name": "keyword.control.command.gdb" },
								"2": { "name": "entity.name.tag.breakpoint.gdb" }
							}
						},
						{
							"begin": "(e(?:n(?:a(?:b(?:l(?:e)?)?)?)?)?)\\b[ \t]*",
							"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
							"patterns": [
								{
									"match": "(\\d+)",
									"captures": { "1": { "name": "entity.name.tag.breakpoint.gdb" } }
								}
							],
							"end": "$"
						},
						{
							"begin": "(di(?:s(?:a(?:b(?:l(?:e)?)?)?)?)?)\\b[ \t]*",
							"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
							"patterns": [
								{
									"match": "(\\d+)",
									"captures": { "1": { "name": "entity.name.tag.breakpoint.gdb" } }
								}
							],
							"end": "$"
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.file.gdb",
					"match": "^[ \t]*(fil(?:e)?)\\b(?:[ \t]+([^[ \t]]+))?[ \t]*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "markup.underline.link.filename.gdb" }
					}
				},
				{
					"name": "meta.command.run.gdb",
					"begin": "^[ \t]*(r(?:u(?:n)?)?)\\b[ \t]*",
					"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
					"patterns": [
						{
							"match": "([^[ \t]]+)",
							"captures": { "1": { "name": "variable.other.arguments.gdb" } }
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.start.gdb",
					"begin": "^[ \t]*(start)\\b[ \t]*",
					"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
					"patterns": [
						{
							"match": "([^[ \t]]+)",
							"captures": { "1": { "name": "variable.other.arguments.gdb" } }
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.ignore.gdb",
					"match": "^[ \t]*(ig(?:n(?:o(?:r(?:e)?)?)?)?)\\b[ \t]+(\\d+|\\$\\w+)[ \t]+(\\d+|\\$\\w+)$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.breakpoint.gdb" },
						"3": { "name": "constant.numeric.count.gdb" }
					}
				},
				{
					"name": "meta.command.break.gdb",
					"match": "^[ \t]*(t?b(?:r(?:e(?:a(?:k)?)?)?)?)\\b(?:[ \t]+([^[ \t]]+)(?:[ \t]+(if)[ \t]+(.*))?)?[ \t]*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "markup.underline.link.location.gdb" },
						"3": { "name": "keyword.control.condition.gdb" },
						"4": { "name": "markup.italic.expression.gdb" }
					}
				},
				{
					"name": "meta.command.delete.gdb",
					"begin": "^[ \t]*(d(?:el(?:e(?:t(?:e)?)?)?)?)\\b(?:[ \t]+(b(?:r(?:e(?:a(?:k(?:p(?:o(?:i(?:n(?:t(?:s)?)?)?)?)?)?)?)?)?)?))?\\b[ \t]*",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" }
					},
					"patterns": [
						{
							"name": "breakpoints.gdb",
							"match": "(\\d+|\\$\\w+)\\b[ \t]*",
							"captures": { "1": { "name": "entity.name.tag.breakpoint.gdb" } }
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.enable.gdb",
					"begin": "^[ \t]*(en(?:a(?:b(?:l(?:e)?)?)?)?)\\b(?:[ \t]+(b(?:r(?:e(?:a(?:k(?:p(?:o(?:i(?:n(?:t(?:s)?)?)?)?)?)?)?)?)?)?))?\\b([ \t]+(?:o(?:n(?:c(?:e)?)?)?|c(?:o(?:u(?:n(?:t)?)?)?)?[ \t]+\\d+|de(?:l(?:e(?:t(?:e)?)?)?)?)?)?\\b[ \t]*",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.suboption.gdb" }
					},
					"patterns": [
						{
							"name": "breakpoints.gdb",
							"match": "(\\d+|\\$\\w+)\\b[ \t]*",
							"captures": { "1": { "name": "entity.name.tag.breakpoint.gdb" } }
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.disable.gdb",
					"begin": "^[ \t]*(dis(?:a(?:b(?:l(?:e)?)?)?)?)\\b(?:[ \t]+(b(?:r(?:e(?:a(?:k(?:p(?:o(?:i(?:n(?:t(?:s)?)?)?)?)?)?)?)?)?)?))?\\b[ \t]*",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "entity.name.tag.breakpoint.gdb" }
					},
					"patterns": [
						{
							"name": "breakpoints.gdb",
							"match": "(\\d+|\\$\\w+)",
							"captures": { "1": { "name": "entity.name.tag.breakpoint.gdb" } }
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.condition.gdb",
					"match": "^[ \t]*(cond(?:i(?:t(?:i(?:o(?:n)?)?)?)?)?)\\b(?:[ \t]+(\\d+|\\$\\w+)\\b(?:[ \t]+(.*))?)?[ \t]*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.breakpoint.gdb" },
						"3": { "name": "markup.italic.expression.gdb" }
					}
				},
				{
					"name": "meta.command.continue.gdb",
					"match": "^[ \t]*(c(?:o(?:n(?:t(?:i(?:n(?:u(?:(?:e)?)?)?)?)?)?)?)?)\\b(?:[ \t]+(\\d+))?[ \t]*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.ignore.gdb" }
					}
				},
				{
					"name": "meta.command.handle.gdb",
					"begin": "^[ \t]*(ha(?:n(?:d(?:l(?:e)?)?)?)?)\\b[ \t]*",
					"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
					"patterns": [
						{
							"match": "(\\$\\w+|\\d+(?:-\\d+)*|all|SIG[A-Z]+)",
							"captures": { "1": { "name": "support.class.signals.gdb" } }
						},
						{
							"match": "((?:no)?(?:s(?:t(?:o(?:p)?)?)?|pr(?:i(?:n(?:t)?)?)?|pas*|i(?:g(?:n(?:o(?:r(?:e)?)?)?)?)?))\\b",
							"captures": { "1": { "name": "support.function.handle.keyword.gdb" } }
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.next.gdb",
					"match": "^[ \t]*(n(?:ext)?)\\b[ \t]*(?:(\\d+)?)[ \t]*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.repeat.gdb" }
					}
				},
				{
					"name": "meta.command.step.gdb",
					"match": "^[ \t]*(s(?:tep)?)\\b[ \t]*(?:(\\d+)?)[ \t]*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.repeat.gdb" }
					}
				},
				{
					"name": "meta.command.directory.gdb",
					"begin": "^[ \t]*(dir(?:e(?:c(?:t(?:o(?:r(?:y)?)?)?)?)?)?)\\b[ \t]*",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" }
					},
					"patterns": [
						{
							"match": "([^:]+)",
							"captures": { "1": { "name": "markup.underline.link.directory.gdb" } }
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.set.gdb",
					"begin": "^[ \t]*(set)\\b[ \t]*",
					"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
					"patterns":[
						{ "include": "#expression" },
						{
							"name": "meta.command.set.breakpoints.gdb",
							"begin": "(b(?:r(?:e(?:a(?:k(?:p(?:o(?:i(?:n(?:t(?:s)?)?)?)?)?)?)?)?)?)?)\\b[ \t]*",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns": [
								{
									"name": "meta.command.set.breakpoint.pending.gdb",
									"match": "(p(?:e(?:n(?:d(?:i(?:n(?:g)?)?)?)?)?)?)\\b[ \t]*(on|of*|a(?:u(?:t(?:o)?)?)?)?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.set.args.gdb",
							"begin": "(args?)\\b[ \t]*",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns": [
								{
									"match": "(.*)",
									"captures": { "1": { "name": "variable.other.variable.gdb" } }
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.set.history.gdb",
							"begin": "(hi(?:s(?:t(?:o(?:r(?:y)?)?)?)?)?)\\b[ \t]*",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns": [
								{
									"name": "meta.command.set.history.save.gdb",
									"match": "(sa(?:v(?:e)?)?)\\b[ \t]*(?:[ \t]+(on|of*))?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								},
								{
									"name": "meta.command.set.history.size.gdb",
									"match": "(si(?:z(?:e)?)?)\\b[ \t]+(u(?:n(?:l(?:i(?:m(?:i(?:t(?:e(?:d)?)?)?)?)?)?)?)?|\\d+)[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								},
								{
									"name": "meta.command.set.history.filename.gdb",
									"match": "(f(?:i(?:l(?:e(?:n(?:a(?:m(?:e)?)?)?)?)?)?)?)\\b[ \t]+(.*)[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.underline.link.filename.gdb" }
									}
								},
								{
									"name": "meta.command.set.history.remove-duplicates.gdb",
									"match": "(r(?:e(?:m(?:o(?:v(?:e(?:-(?:d(?:u(?:p(?:l(?:i(?:c(?:a(?:t(?:e(?:s)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)[ \t]+(u(?:n(?:l(?:i(?:m(?:i(?:t(?:e(?:d)?)?)?)?)?)?)?)?|\\d+)[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.set.substitute-path.gdb",
							"match": "(su(?:b(?:s(?:t(?:i(?:t(?:u(?:t(?:e(?:-(?:p(?:a(?:t(?:h)?)?)?)?)?)?)?)?)?)?)?)?)?)[ \t]+([^[ \t]]+)[ \t]+(.*)[ \t]*$",
							"captures": {
								"1": { "name": "support.function.option.gdb" },
								"2": { "name": "markup.underline.link.directory.gdb" },
								"3": { "name": "markup.underline.link.directory.gdb" }
							}
						},
						{
							"name": "meta.command.set.auto-load.gdb",
							"begin": "(auto-load)\\b[ \t]+",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns":[
								{
									"match": "(no?)\\b[ \t]*$",
									"captures": { "1": { "name": "markup.bold.argument.gdb" } }
								},
								{
									"name": "meta.command.set.auto-load.safe-path.gdb",
									"begin": "(sa(?:f(?:e(?:-(?:p(?:a(?:t(?:h)?)?)?)?)?)?)?)[ \t]*",
									"beginCaptures": { "1": { "name": "variable.other.suboption.gdb" } },
									"patterns":[
										{
											"match": "([^:]+)",
											"captures": { "1": { "name": "markup.underline.link.directory.gdb" } }
										}
									],
									"end": "$"
								},
								{
									"name": "meta.command.set.auto-load.local-gdbinit.gdb",
									"match": "(lo(?:c(?:a(?:l(?:-(?:g(?:d(?:b(?:i(?:n(?:i(?:t)?)?)?)?)?)?)?)?)?)?)?)(?:[ \t]+(on|of*))?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								},
								{
									"name": "meta.command.set.auto-load.python-scripts.gdb",
									"match": "(p(?:y(?:t(?:h(?:o(?:n(?:-(?:s(?:c(?:r(?:i(?:p(?:t(?:s)?)?)?)?)?)?)?)?)?)?)?)?)?)(?:[ \t]+(on|of*))?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.set.logging.gdb",
							"begin": "(lo(?:g(?:g(?:i(?:n(?:g)?)?)?)?)?)\\b(?:[ \t]+(of*)$|[ \t]+)",
							"beginCaptures": {
								"1": { "name": "support.function.option.gdb" },
								"2": { "name": "variable.other.variable.gdb" }
							},
							"patterns":[
								{
									"match": "(f(?:i(?:l(?:e)?)?)?|on)\\b(?:[ \t]+(.+))?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.underline.link.filename.gdb" }
									}
								},
								{
									"match": "(ov(?:e(?:r(?:w(?:r(?:i(?:t(?:e)?)?)?)?)?)?)?)\\b(?:[ \t]+(on|of*))?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								},
								{
									"match": "(r(?:e(?:d(?:i(?:r(?:e(?:c(?:t)?)?)?)?)?)?)?)\\b(?:[ \t]+(on|of*))?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.set.pagination.gdb",
							"match": "(pa(?:g(?:i(?:n(?:a(?:t(?:i(?:o(?:n)?)?)?)?)?)?)?)?)\\b(?:[ \t]+(on|of(?:f)?))?[ \t]*$",
							"captures": {
								"1": { "name": "support.function.option.gdb" },
								"2": { "name": "markup.bold.argument.gdb" }
							}
						},
						{
							"name": "meta.command.set.variable.gdb",
							"begin": "(var(?:i(?:a(?:b(?:l(?:e)?)?)?)?)?)\\b[ \t]+",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns": [
								{
									"match": "([^ \t=]+)[ \t]*=",
									"captures": { "1": { "name": "variable.other.variable.gdb" } }
								},
								{ "include": "#expression" }
							],
							"end": "$"
						},
						{
							"name": "meta.commant.set.print.gdb",
							"begin": "(p(?:r(?:i(?:n(?:t)?)?)?)?)\\b[ \t]+",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns": [
								{
									"name": "meta.commant.set.print.pretty.gdb",
									"match": "(pr(?:e(?:t(?:t(?:y)?)?)?)?)\\b(?:[ \t]+(on|of*))?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								},
								{
									"name": "meta.commant.set.print.vtbl.gdb",
									"match": "(v(?:t(?:b(?:l)?)?)?)\\b(?:[ \t]+(on|of*))?[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								},
								{
									"name": "meta.command.set.print.elements.gdb",
									"match": "(el(?:e(?:m(?:e(?:n(?:t(?:s)?)?)?)?)?)?)\\b[ \t]+(?:\\d+|(u(?:n(?:l(?:i(?:m(?:i(?:t(?:e(?:d)?)?)?)?)?)?)?)?))[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								},
								{
									"name": "meta.command.set.print.repeats.gdb",
									"match": "(re(?:p(?:e(?:a(?:t(?:s)?)?)?)?)?)\\b[ \t]+(?:\\d+|(u(?:n(?:l(?:i(?:m(?:i(?:t(?:e(?:d)?)?)?)?)?)?)?)?))[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								},
								{
									"name": "meta.command.set.print.frame-arguments.gdb",
									"match": "(frame-a(?:r(?:g(?:u(?:m(?:e(?:n(?:t(?:s)?)?)?)?)?)?)?)?)\\b[ \t]+(al*|s(?:c(?:a(?:l(?:a(?:r(?:s)?)?)?)?)?)?|n(?:o(?:n(?:e)?)?)?|p(?:r(?:e(?:s(?:e(?:n(?:c(?:e)?)?)?)?)?)?)?)[ \t]*$",
									"captures": {
										"1": { "name": "variable.other.suboption.gdb" },
										"2": { "name": "markup.bold.argument.gdb" }
									}
								}
							],
							"end": "$"
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.show.gdb",
					"begin": "^[ \t]*(show?)\\b[ \t]*",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" }
					},
					"patterns":[
						{ "include": "#expression" },
						{
							"name": "meta.command.show.breakpoints.gdb",
							"begin": "(b(?:r(?:e(?:a(?:k(?:p(?:o(?:i(?:n(?:t(?:s)?)?)?)?)?)?)?)?)?)?)\\b[ \t]*",
							"beginCaptures": {
								"1": { "name": "support.function.option.gdb" }
							},
							"patterns": [
								{
									"name": "meta.command.show.breakpoint.pending.gdb",
									"match": "(p(?:e(?:n(?:d(?:i(?:n(?:g)?)?)?)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.show.args.gdb",
							"match": "(args?)\\b[ \t]*$",
							"captures": { "1": { "name": "support.function.option.gdb" } }
						},
						{
							"name": "meta.command.show.history.gdb",
							"begin": "(hi(?:s(?:t(?:o(?:r(?:y)?)?)?)?)?)\\b[ \t]*",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns": [
								{
									"name": "meta.command.show.history.save.gdb",
									"match": "(sa(?:v(?:e)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.command.show.history.size.gdb",
									"match": "(si(?:z(?:e)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.command.show.history.filename.gdb",
									"match": "(f(?:i(?:l(?:e(?:n(?:a(?:m(?:e)?)?)?)?)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.command.show.history.remove-duplicates.gdb",
									"match": "(r(?:e(?:m(?:o(?:v(?:e(?:-(?:d(?:u(?:p(?:l(?:i(?:c(?:a(?:t(?:e(?:s)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.show.substitute-path.gdb",
							"match": "(su(?:b(?:s(?:t(?:i(?:t(?:u(?:t(?:e(?:-(?:p(?:a(?:t(?:h)?)?)?)?)?)?)?)?)?)?)?)?)?)[ \t]*$",
							"captures": { "1": { "name": "support.function.option.gdb" } }
						},
						{
							"name": "meta.command.show.auto-load.gdb",
							"begin": "(auto-load)\\b[ \t]+",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns":[
								{
									"name": "meta.command.show.auto-load.safe-path.gdb",
									"match": "(sa(?:f(?:e(?:-(?:p(?:a(?:t(?:h)?)?)?)?)?)?)?)[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.command.show.auto-load.local-gdbinit.gdb",
									"match": "(lo(?:c(?:a(?:l(?:-(?:g(?:d(?:b(?:i(?:n(?:i(?:t)?)?)?)?)?)?)?)?)?)?)?)[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.command.show.auto-load.python-scripts.gdb",
									"match": "(p(?:y(?:t(?:h(?:o(?:n(?:-(?:s(?:c(?:r(?:i(?:p(?:t(?:s)?)?)?)?)?)?)?)?)?)?)?)?)?)[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.show.logging.gdb",
							"begin": "(lo(?:g(?:g(?:i(?:n(?:g)?)?)?)?)?)\\b[ \t]*",
							"beginCaptures": { "1": { "name": "support.function.option.gdb" } },
							"patterns":[
								{
									"match": "(f(?:i(?:l(?:e)?)?)?)[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"match": "(ov(?:e(?:r(?:w(?:r(?:i(?:t(?:e)?)?)?)?)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"match": "(r(?:e(?:d(?:i(?:r(?:e(?:c(?:t)?)?)?)?)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								}
							],
							"end": "$"
						},
						{
							"name": "meta.command.show.pagination.gdb",
							"match": "(pa(?:g(?:i(?:n(?:a(?:t(?:i(?:o(?:n)?)?)?)?)?)?)?)?)\\b[ \t]*$",
							"captures": { "1": { "name": "support.function.option.gdb" } }
						},
						{
							"name": "meta.commant.show.print.gdb",
							"begin": "(p(?:r(?:i(?:n(?:t)?)?)?)?)\\b[ \t]*",
							"beginCaptures": {
								"1": { "name": "support.function.option.gdb" }
							},
							"patterns": [
								{
									"name": "meta.commant.show.print.pretty.gdb",
									"match": "(pr(?:e(?:t(?:t(?:y)?)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.commant.show.print.vtbl.gdb",
									"match": "(v(?:t(?:b(?:l)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.command.show.print.elements.gdb",
									"match": "(el(?:e(?:m(?:e(?:n(?:t(?:s)?)?)?)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.command.show.print.repeats.gdb",
									"match": "(re(?:p(?:e(?:a(?:t(?:s)?)?)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								},
								{
									"name": "meta.command.show.print.frame-arguments.gdb",
									"match": "(frame-a(?:r(?:g(?:u(?:m(?:e(?:n(?:t(?:s)?)?)?)?)?)?)?)?)\\b[ \t]*$",
									"captures": { "1": { "name": "variable.other.suboption.gdb" } }
								}
							],
							"end": "$"
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.watch.gdb",
					"begin": "^[ \t]*((?:a|r)?wa(?:t(?:c(?:h)?)?)?)\\b[ \t]+(-l(?:ocation)?[ \t]+)?(?:(\\w+)|\\*[ \t]*\\([^)]+[ \t]*\\*\\)[ \t]*(0x[0-9A-Fa-f]+)[ \t]*\\)|(\\$\\w+))",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.watch-expression.gdb" },
						"4": { "name": "variable.other.watch-adress.gdb" },
						"5": { "name": "entity.name.tag.watch-convenience.gdb" }
					},
					"patterns": [
						{
							"match": "(thread)[ \t]+(\\d+)",
							"captures": {
								"1": { "name": "support.function.suboption.gdb" },
								"2": { "name": "constant.numeric.base10.thread_id.gdb" }
							}
						},
						{
							"match": "(mask)[ \t]+(0x[a-fA-Z0-9]+)",
							"captures": {
								"1": { "name": "support.function.suboption.gdb" },
								"2": { "name": "constant.character.escape.mask_value.gdb" }
							}
						},
						{
							"match": "(task)[ \t]+(\\d+)",
							"captures": {
								"1": { "name": "support.function.suboption.gdb" },
								"2": { "name": "constant.numeric.base10.task_id.gdb" }
							}
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.source.gdb",
					"begin": "^[ \t]*(so(?:u(?:r(?:c(?:e)?)?)?)?)\\b[ \t]+",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" }
					},
					"patterns": [
						{
							"match": "(-v|-s)\\b",
							"captures": {
								"1": { "name": "support.function.option.gdb" }
							}
						},
						{
							"match": "([^ \t]+)[^ \t]*$",
							"captures": { "1": { "name": "markup.underline.link.filename.gdb" } }
						}
					],
					"end": "$"
				},
				{
					"name": "meta.command.printf.gdb",
					"match": "^[ \t]*(printf)\\b",
					"captures": { "1": { "name": "keyword.control.command.gdb" } }
				},
				{
					"name": "meta.command.print.gdb",
					"match": "^[ \t]*(p(?:rint)?)\\b[ \t]*((?:--.*[ \t]+)+--)?([ \t]*\\/[xdutacfszr])?[ \t]+",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.print.option.gdb" },
						"3": { "name": "constant.character.escape.format.gdb" }
					}
				},
				{
					"name": "meta.command.echo.gdb",
					"match": "^[ \t]*(ec(?:h(?:o)?)?)\\b[ \t]*(.*)[ \t]*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "string.quoted.double" }
					}
				},
				{
					"name": "meta.command.python.gdb",
					"begin": "^[ \t]*(py(?:thon)?)(?!-)\\b[ \t]+(?:.+)[ \t]*",
					"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
					"end": "[ \t]*$",
					"patterns": [ { "include": "source.python" } ]
				},
				{
					"name": "meta.command.python-interactive.gdb",
					"begin": "^[ \t]*(pi|python-interactive)\\b[ \t]*",
					"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
					"end": "[ \t]*$",
					"patterns": [ { "include": "source.python" } ]
				}
			]
		},
		"block": {
			"patterns": [
				{
					"name": "meta.block.commands.gdb",
					"begin": "^[ \t]*(comm(?:a(?:n(?:d(?:s)?)?)?)?)\\b[ \t]*(.*)?[ \t]*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.breakpoint.gdb" }
					},
					"end": "^[ \t]*(end)[ \t]*$",
					"endCaptures": {
						"1": { "name": "keyword.control.end.commands.gdb" }
					},
					"patterns": [
						{ "include": "#expression" }
					]
				},
				{
					"name": "meta.block.conditional.gdb",
					"begin": "^[ \t]*(if)\\b[ \t]+(.+)[ \t]*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "markup.italic.expression.gdb" }
					},
					"end": "^[ \t]*(end)[ \t]*$",
					"endCaptures": { "1": { "name": "keyword.control.end.conditional.gdb" } },
					"patterns": [
						{ "include": "#expression" },
						{
							"match": "^[ \t]*(else)\\b[ \t]*$",
							"captures": { "1": { "name": "keyword.control.command.gdb" } }
						}
					]
				},
				{
					"name": "meta.block.while.gdb",
					"begin": "^[ \t]*(while)\\b[ \t]+(.*)[ \t]*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "keyword.control.condition.gdb" }
					},
					"end": "^[ \t]*(end)\\b[ \t]*$",
					"endCaptures": { "1": { "name": "keyword.control.end.while.gdb" } },
					"patterns": [ { "include": "#expression" } ]
				},
				{
					"name": "meta.block.define-command.gdb",
					"begin": "^[ \t]*(define(?:-prefix)?\\b[ \t]+comm(?:a(?:n(?:d)?)?)?)[ \t]+([^[ \t]]+)[ \t]*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "variable.other.variable.gdb" }
					},
					"end": "^[ \t]*(end)[ \t]*$",
					"endCaptures": { "1": { "name": "keyword.control.end.define-command.gdb" } },
					"patterns": [ { "include": "#expression" } ]
				},
				{
					"name": "meta.block.document.gdb",
					"begin": "^[ \t]*(doc(?:u(?:m(?:e(?:n(?:t)?)?)?)?)?)[ \t]+([^\\s]+)[ \t]*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "variable.other.variable.gdb" }
					},
					"end": "^[ \t]*(end)[ \t]*$",
					"endCaptures": { "1": { "name": "keyword.control.end.document.gdb" } },
					"patterns": [
						{ 
							"match": ".+",
							"name" : "markup.italic.document.gdb"
						}
					]
				},
				{
					"name": "meta.block.hook.gdb",
					"begin": "^[ \t]*(define)\\b[ \t]+(hook-[^[ \t]]+)\\b[ \t]*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "variable.other.variable.gdb" }
					},
					"end": "^[ \t]*(end)[ \t]*$",
					"endCaptures": {
						"1": { "name": "keyword.control.end.hook.gdb" }
					},
					"patterns": [ { "include": "#expression" } ]
				},
				{
					"name": "meta.block.python.gdb",
					"begin": "^[ \t]*(py(?:thon)?)\\b[ \t]*$",
					"beginCaptures": { "1": { "name": "keyword.control.command.gdb" } },
					"end": "^[ \t]*(end)[ \t]*$",
					"endCaptures": { "1": { "name": "keyword.control.end.python.gdb" } },
					"patterns": [ { "include": "source.python" } ]
				}
			]
		},
		"convenience": {
			"patterns": [
				{
					"name": "entity.name.tag.convenience.gdb",
					"match": "\\B(\\$[^ \t=]+)\\b"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.number-sign.gdb",
					"match": "^[ \t]*#.*$"
				},
				{
					"match": "[^[ \t]][^#]*(#.*)$",
					"captures": { "1": { "name": "invalid.comment.gdb" } }
				}
			]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gdb",
					"match": "\\\\."
				},
				{
					"name": "constant.character.escape.format.gdb",
					"match": "(\\%\\d*\\.?\\d*(?:[cdeEfgGilopsuxXn%]?|(?:h[iu]|l[difu]]|LF|ll[idu])?)){1}"
				}
			]
		},
		"char": {
			"patterns": [
				{
					"name": "constant.numeric.character",
					"match": "'.'"
				}
			]
		},
		"on_off_unlimited": {
			"patterns": [
				{
					"name": "meta.on_off_unlimited.gdb",
					"match": "(u(?:n(?:l(?:i(?:m(?:i(?:t(?:e(?:d)?)?)?)?)?)?)?)|on|off?)",
					"captures": {
						"1" : { "name": "markup.bold.argument.gdb" }
					}
				}
			]
		},
		"numeric": {
			"patterns": [
				{
					"name": "constant.numeric.base2.gdb",
					"match": "\\b(0b[01]+)\\b",
					"captures": { "1": { "name": "constant.character.escape" } }

				},
				{
					"name": "constant.numeric.base8.gdb",
					"match": "\\b(0[0-7]*)\\b",
					"captures": { "1": { "name": "constant.character.escape" } }
				},
				{
					"name": "constant.numeric.base16.gdb",
					"match": "\\b(0x[0-9A-Za-f]+)\\b",
					"captures": { "1": { "name": "constant.character.escape" } }

				},
				{
					"name": "constant.numeric.base10.gdb",
					"match": "(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)[eE][+-]\\d+|\\d+\\.\\d*|\\d*\\.\\d+|\\d+"
				}
			]
		}
	},
	"scopeName": "source.gdb"
}
